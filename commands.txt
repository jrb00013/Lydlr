# =========================================
# ROS 2 + Docker Workspace Setup Guide
# Target: MacOS with Docker and ROS 2 Humble, 
# Utilizing Homebrew and pip
# =========================================

# -----------------------------------------
# 0. Pull ROS 2 Docker Image
# -----------------------------------------
docker pull osrf/ros:humble-desktop

# -----------------------------------------
# 1. REQUIRED: Build and Run Docker Container for ROS2 with Volume Mount
# -----------------------------------------

docker build -t ros2_xvfb .

docker run -it \
    --name ros2_ai \
    -v ~/Documents/lydlr:/root/lydlr \
    ros2_xvfb \
    bash -c "export PYTHONPATH=\$PYTHONPATH:/root/lydlr/lydlr_ws/src:/root/lydlr/lydlr_ws/.venv/lib/python3.10/site-packages && \
             export XDG_RUNTIME_DIR=/tmp/runtime-root && \
             mkdir -p \$XDG_RUNTIME_DIR && \
             chmod 700 \$XDG_RUNTIME_DIR && \
             Xvfb :99 -screen 0 1024x768x24 & \
             export DISPLAY=:99 && \
             source /opt/ros/humble/setup.bash && \
             cd /root/lydlr/lydlr_ws && \
             exec bash"


or 

Plain Docker Container Launch:

docker run -it \
    --name ros2_ai \
    -e DISPLAY=host.docker.internal:0 \
    -v ~/Documents/lydlr:/root/lydlr \
    osrf/ros:humble-desktop
    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Re-entering the Already Running Docker container:
docker exec -it ros2_ai bash -c "cd /root/lydlr/lydlr_ws && bash"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Restart Docker Container and Enter:
docker start -ai ros2_ai
cd /root/lydlr/lydlr_ws


# ----------------------------------------
# 2. REQUIRED: Activate the virtual environment
# ----------------------------------------
cd ~/lydlr/lydlr_ws
source ~/lydlr/lydlr_ws/.venv/bin/activate


# -----------------------------------------
# 3. REQUIRED: Source ROS 2 Environment
# Inside the running container:
# -----------------------------------------
source /opt/ros/humble/setup.bash

# -----------------------------------------
# 4. Create a New Workspace
# Only run once (unless starting over)
# -----------------------------------------
mkdir -p /root/lydlr/lydlr_ws/src
cd /root/lydlr/lydlr_ws

# -----------------------------------------
# 5. Create a New Package
# Inside src/ directory of workspace
# -----------------------------------------
cd /root/lydlr/lydlr_ws/src

ros2 pkg create --build-type ament_python \
    --dependencies rclpy std_msgs sensor_msgs \
    -- lydlr_ai

# If you forget `--`, it will think your package name is a dependency.

# -----------------------------------------
# 6. REQUIRED: Build the Workspace
# -----------------------------------------
cd /root/lydlr/lydlr_ws
colcon build --symlink-install --packages-select lydlr_ai



# -----------------------------------------
# 7. REQUIRED: Source the Workspace 
# -----------------------------------------
source install/setup.bash


# -----------------------------------------
# 8. REQUIRED: Source the Python Enviornment 
# -----------------------------------------
source .venv/bin/activate


# -----------------------------------------
# 9. Create Your Python Node
# Edit this file:
# /root/lydlr/lydlr_ws/src/lydlr_ai/lydlr_ai/your_node.py



# -----------------------------------------
# 10. REQUIRED: Register Your Node

# In lydlr_ai/setup.py, add:



# -----------------------------------------
entry_points={
    'console_scripts': [
        'your_node_name = lydlr_ai.your_node_file_name:main',
    ],
},

* your_node_name is the python file without the .py *


# -----------------------------------------
# Rebuild & Source Workspace Again Each Time After Creating a New Node and edit scripts.py
# -----------------------------------------
cd /root/lydlr/lydlr_ws
colcon build --symlink-install --packages-select lydlr_ai
source install/setup.bash         // source workspace

# -----------------------------------------
# 11. REQUIRED: Change Python Interpreter and Set Environment Variables + Source Again
# -----------------------------------------
export PYTHONPATH=$PYTHONPATH:/root/lydlr/lydlr_ws/src:/root/lydlr/lydlr_ws/.venv/lib/python3.10/site-packages && \
export XDG_RUNTIME_DIR=/tmp/runtime-root && \
mkdir -p $XDG_RUNTIME_DIR && \
chmod 700 $XDG_RUNTIME_DIR && \
Xvfb :99 -screen 0 1024x768x24 & \
export DISPLAY=:99 && \
source /root/lydlr/lydlr_ws/install/setup.bash


# -----------------------------------------
# 12. REQUIRED: Run the ROS2 Node
# ----------------------------------------- 
ros2 run lydlr_ai your_node_name


# -----------------------------------------
#  Stopping & Restarting Docker Container
# -----------------------------------------
# Exit container:
exit

# Stop:
docker stop ros2_ai

# Start again:
docker start -ai ros2_ai

# Or run a new terminal into container:
docker exec -it ros2_ai bash

# -----------------------------------------
#  Deleting Docker Container (if needed)
# -----------------------------------------
docker stop ros2_ai
docker rm ros2_ai


# -----------------------------------------
# Sending Test Topic for ROS2 Publishing
# -----------------------------------------

ros2 topic pub /camera/image_raw sensor_msgs/msg/Image "{
  header: {frame_id: 'fake_camera'},
  height: 3,
  width: 2,
  encoding: 'mono8',
  is_bigendian: 0,
  step: 2,
  data: [0, 50, 100, 150, 200, 255]
}"


####################################
Python Virtual Environments

a. Creating a Python Virtual Environment: 
From the workspace root lydlr_ws:

cd ~/lydlr/lydlr_ws
python3 -m venv .venv
This creates a .venv folder that contains an isolated Python environment.

b. Activate the virtual environment
source ~/lydlr/lydlr_ws/.venv/bin/activate


####################################

Always run " colcon build " in the workspace folder. 
But you can run any ros2 node in any directory, by using source install/setup.bash



~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CLEAN WORKSPACE:

colcon build --packages-select lydlr_ai --cmake-clean-cache

Full Clean Workspace:

cd ~/lydlr/lydlr_ws
rm -rf build/ install/ log/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~